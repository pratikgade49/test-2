import streamlit as st
from PIL import Image
import io

def validate_image(uploaded_file):
    """Validate uploaded image file"""
    try:
        # Check file size (max 10MB)
        if uploaded_file.size > 10 * 1024 * 1024:
            st.error("File size too large. Please upload an image smaller than 10MB.")
            return False
        
        # Try to open as image
        image = Image.open(uploaded_file)
        
        # Check image format
        if image.format not in ['JPEG', 'PNG', 'JPG']:
            st.error("Unsupported image format. Please upload JPG, JPEG, or PNG images.")
            return False
        
        # Check image dimensions (minimum 50x50)
        if image.size[0] < 50 or image.size[1] < 50:
            st.error("Image too small. Please upload an image at least 50x50 pixels.")
            return False
        
        # Reset file pointer
        uploaded_file.seek(0)
        
        return True
        
    except Exception as e:
        st.error(f"Error validating image: {str(e)}")
        return False

def format_confidence(confidence):
    """Format confidence score as percentage with appropriate styling"""
    percentage = confidence * 100
    
    if percentage >= 90:
        return f"**{percentage:.1f}%** 🎯"
    elif percentage >= 70:
        return f"**{percentage:.1f}%** ✅"
    elif percentage >= 50:
        return f"**{percentage:.1f}%** ⚠️"
    else:
        return f"**{percentage:.1f}%** ❓"

def get_confidence_color(confidence):
    """Return color code based on confidence level"""
    if confidence >= 0.8:
        return "success"
    elif confidence >= 0.6:
        return "warning"
    else:
        return "error"

def resize_image_for_display(image, max_width=500):
    """Resize image for display while maintaining aspect ratio"""
    try:
        width, height = image.size
        
        if width > max_width:
            # Calculate new height to maintain aspect ratio
            new_height = int((height * max_width) / width)
            image = image.resize((max_width, new_height), Image.Resampling.LANCZOS)
        
        return image
        
    except Exception as e:
        st.error(f"Error resizing image: {str(e)}")
        return image

def get_treatment_urgency(disease_name, confidence):
    """Determine treatment urgency based on disease and confidence"""
    high_severity_diseases = [
        'Late_blight',
        'Black_rot',
        'Bacterial_spot'
    ]
    
    is_severe = any(severe in disease_name for severe in high_severity_diseases)
    
    if is_severe and confidence > 0.7:
        return "urgent"
    elif confidence > 0.8:
        return "moderate"
    else:
        return "monitor"

def format_disease_name(disease_name):
    """Format disease name for better readability"""
    # Replace underscores with spaces
    formatted = disease_name.replace('_', ' ')
    
    # Replace triple underscores with dash (plant___disease format)
    formatted = formatted.replace('   ', ' - ')
    
    # Capitalize words
    words = formatted.split()
    formatted_words = []
    
    for word in words:
        if word.lower() in ['of', 'and', 'the', 'in', 'on']:
            formatted_words.append(word.lower())
        else:
            formatted_words.append(word.capitalize())
    
    return ' '.join(formatted_words)

def create_download_report(disease_name, confidence, treatment_info):
    """Create a downloadable report with diagnosis and treatment information"""
    report = f"""
PLANT DISEASE ANALYSIS REPORT
============================

Diagnosis: {format_disease_name(disease_name)}
Confidence: {confidence*100:.1f}%
Analysis Date: {st.session_state.get('analysis_date', 'N/A')}

DESCRIPTION:
{treatment_info.get('description', 'No description available')}

SYMPTOMS:
"""
    
    for symptom in treatment_info.get('symptoms', []):
        report += f"• {symptom}\n"
    
    report += "\nRECOMMENDED TREATMENT:\n"
    for treatment in treatment_info.get('treatment', []):
        report += f"• {treatment}\n"
    
    report += "\nPREVENTION MEASURES:\n"
    for prevention in treatment_info.get('prevention', []):
        report += f"• {prevention}\n"
    
    report += """
DISCLAIMER:
This analysis is provided by an AI system for guidance purposes only. 
For serious infections or if you're uncertain about the diagnosis, 
please consult with local agricultural experts or extension services.

Generated by Plant Disease Classifier AI
"""
    
    return report
